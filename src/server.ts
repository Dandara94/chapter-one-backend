// Express.js est un framework minimaliste et flexible pour Node.js, utilisÃ© pour crÃ©er des serveurs web et API. Il simplifie la gestion des routes, des requÃªtes et des rÃ©ponses HTTP.
import express from "express";
// CORS empÃªche les requÃªtes non autorisÃ©es venant d'autres domaines.Permet dâ€™autoriser ou de bloquer des requÃªtes selon leur origine.CORS pour sÃ©curiser l'accÃ¨s Ã  lâ€™API.
import cors from "cors";
//dotenv est un module qui permet de charger des variables dâ€™environnement depuis un fichier .env dans un projet Node.js. Cela Ã©vite de stocker des informations sensibles directement dans le code source, comme des clÃ©s API, des URL de base de donnÃ©es ou des secrets.
import dotenv from "dotenv";
// import { connectDB } from "./database"; // Importation de la connexion MongoDB
import { config } from "./config"; // Importation des variables d'environnement validÃ©es
import bookRoutes from "./routes/book.routes"; // Import des routes Book
// import userRoutes from "./routes/user.routes"; // Import du router

const app = express();
// const PORT = process.env.PORT || 3000;
const PORT = config.PORT; // RÃ©cupÃ©ration du port depuis config.ts

dotenv.config(); // Charge les variables d'environnement

//Middlewares
app.use(cors());
app.use(express.json());

// Routes
app.use("/api/books", bookRoutes); // Ajout des routes sous /api/books
// app.use("/users", userRoutes); // Lier les routes des utilisateurs

app.get("/", (req, res) => {
  res.send("Hello, Node.js + Express + TypeScript!");
});

app.listen(PORT, () => {
  // await connectDB(); // Connexion MongoDB
  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
});
